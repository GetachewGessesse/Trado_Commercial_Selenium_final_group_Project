{"name": "test_sales_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (2490, 100)\n  (Session info: chrome=110.0.5481.104)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x004437D3]\n\t(No symbol) [0x003D8B81]\n\t(No symbol) [0x002DB36D]\n\t(No symbol) [0x00314E3B]\n\t(No symbol) [0x003126DB]\n\t(No symbol) [0x0030FD0B]\n\t(No symbol) [0x0030E4D8]\n\t(No symbol) [0x00303253]\n\t(No symbol) [0x0032B41C]\n\t(No symbol) [0x00302B96]\n\t(No symbol) [0x0032B774]\n\t(No symbol) [0x00341215]\n\t(No symbol) [0x0032B216]\n\t(No symbol) [0x00300D97]\n\t(No symbol) [0x0030253D]\n\tGetHandleVerifier [0x006BABF2+2510930]\n\tGetHandleVerifier [0x006E8EC1+2700065]\n\tGetHandleVerifier [0x006EC86C+2714828]\n\tGetHandleVerifier [0x004F3480+645344]\n\t(No symbol) [0x003E0FD2]\n\t(No symbol) [0x003E6C68]\n\t(No symbol) [0x003E6D4B]\n\t(No symbol) [0x003F0D6B]\n\tBaseThreadInitThunk [0x752C00F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x76F87BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x76F87B8E+238]", "trace": "self = <Web.Test.test_sales.Test_snack object at 0x0000016D5E043CA0>\n\n    @allure.description('Test if the sales Page loads')\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.regression\n    def test_sales_page(self):\n        sales = Sales_page(self)\n        sales.open_trado()\n        sales.click_option1()\n        sales.click_option2()\n        sales.click_save_button()\n>       sales.click_on_sale_page()\n\ntest_sales.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Page\\sales_page.py:70: in click_on_sale_page\n    self.driver.find_element(By.XPATH, self.sales_xpath).click()\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: in _execute\n    return self._parent.execute(command, params)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016D5E10DB20>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76F87BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76F87B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (2490, 100)\nE         (Session info: chrome=110.0.5481.104)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x004437D3]\nE       \t(No symbol) [0x003D8B81]\nE       \t(No symbol) [0x002DB36D]\nE       \t(No symbol) [0x00314E3B]\nE       \t(No symbol) [0x003126DB]\nE       \t(No symbol) [0x0030FD0B]\nE       \t(No symbol) [0x0030E4D8]\nE       \t(No symbol) [0x00303253]\nE       \t(No symbol) [0x0032B41C]\nE       \t(No symbol) [0x00302B96]\nE       \t(No symbol) [0x0032B774]\nE       \t(No symbol) [0x00341215]\nE       \t(No symbol) [0x0032B216]\nE       \t(No symbol) [0x00300D97]\nE       \t(No symbol) [0x0030253D]\nE       \tGetHandleVerifier [0x006BABF2+2510930]\nE       \tGetHandleVerifier [0x006E8EC1+2700065]\nE       \tGetHandleVerifier [0x006EC86C+2714828]\nE       \tGetHandleVerifier [0x004F3480+645344]\nE       \t(No symbol) [0x003E0FD2]\nE       \t(No symbol) [0x003E6C68]\nE       \t(No symbol) [0x003E6D4B]\nE       \t(No symbol) [0x003F0D6B]\nE       \tBaseThreadInitThunk [0x752C00F9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x76F87BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x76F87B8E+238]\n\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException"}, "description": "Test if the sales Page loads", "steps": [{"name": "open_trado", "status": "passed", "start": 1677016423004, "stop": 1677016430367}, {"name": "click_option1", "status": "passed", "start": 1677016430367, "stop": 1677016430436}, {"name": "click_option2", "status": "passed", "start": 1677016430437, "stop": 1677016430498}, {"name": "click_save_button", "status": "passed", "start": 1677016430498, "stop": 1677016431021}, {"name": "click_on_sale_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (2490, 100)\n  (Session info: chrome=110.0.5481.104)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x004437D3]\n\t(No symbol) [0x003D8B81]\n\t(No symbol) [0x002DB36D]\n\t(No symbol) [0x00314E3B]\n\t(No symbol) [0x003126DB]\n\t(No symbol) [0x0030FD0B]\n\t(No symbol) [0x0030E4D8]\n\t(No symbol) [0x00303253]\n\t(No symbol) [0x0032B41C]\n\t(No symbol) [0x00302B96]\n\t(No symbol) [0x0032B774]\n\t(No symbol) [0x00341215]\n\t(No symbol) [0x0032B216]\n\t(No symbol) [0x00300D97]\n\t(No symbol) [0x0030253D]\n\tGetHandleVerifier [0x006BABF2+2510930]\n\tGetHandleVerifier [0x006E8EC1+2700065]\n\tGetHandleVerifier [0x006EC86C+2714828]\n\tGetHandleVerifier [0x004F3480+645344]\n\t(No symbol) [0x003E0FD2]\n\t(No symbol) [0x003E6C68]\n\t(No symbol) [0x003E6D4B]\n\t(No symbol) [0x003F0D6B]\n\tBaseThreadInitThunk [0x752C00F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x76F87BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x76F87B8E+238]\n\n", "trace": "  File \"C:\\Users\\user\\PycharmProjects\\Trado_Commercial_Selenium_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\PycharmProjects\\Trado_Commercial_Selenium_Project\\Web\\Page\\sales_page.py\", line 70, in click_on_sale_page\n    self.driver.find_element(By.XPATH, self.sales_xpath).click()\n  File \"C:\\Users\\user\\PycharmProjects\\Trado_Commercial_Selenium_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\user\\PycharmProjects\\Trado_Commercial_Selenium_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 403, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\Users\\user\\PycharmProjects\\Trado_Commercial_Selenium_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\user\\PycharmProjects\\Trado_Commercial_Selenium_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1677016431021, "stop": 1677016432170}], "start": 1677016423004, "stop": 1677016432174, "uuid": "a465bdfc-85b7-4460-bf34-ac3ecae2e20f", "historyId": "c2c08f362883009449b404ce8e4b67cc", "testCaseId": "2b503b5b1e02474d8ad39c4627a06b58", "fullName": "test_sales.Test_snack#test_sales_page", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "regression"}, {"name": "suite", "value": "test_sales"}, {"name": "subSuite", "value": "Test_snack"}, {"name": "host", "value": "LAPTOP-CFNBSI63"}, {"name": "thread", "value": "18880-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_sales"}]}